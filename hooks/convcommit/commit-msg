#!/usr/bin/env bash

CONFIG="$PWD/.convcommit.json"
if [ ! -f "$CONFIG" ]; then
	exit 0
fi

# checks that jq is usable
function check_jq_exists_and_executable() {
	if ! [ -x "$(command -v jq)" ]; then
		echo -e "\"commit-msg\" hook failed. Please install jq."
		exit 1
	fi
}

# set values from config file to variables
function set_config_values() {
	enabled=$(jq -r .enabled "$CONFIG")

	if [[ ! $enabled ]]; then
		exit 0
	fi

	revert=$(jq -r .revert "$CONFIG")
	types=($(jq -r '.types[]' "$CONFIG"))
	min_length=$(jq -r .length.min "$CONFIG")
	max_length=$(jq -r .length.max "$CONFIG")
}

# build the regex pattern based on the config file
function build_regex() {
	set_config_values

	regexp="^("

	if [[ $revert ]]; then
		regexp="${regexp}^([Rr]evert|[Mm]erge)( \(?[a-zA-Z0-9_#]+\)?)?:( .*)$)|(^"
	fi

	regexp="${regexp}("

	for idx in "${!types[@]}"; do
		if [[ "$idx" -gt 0 ]]; then
			regexp="${regexp}|"
		fi

		regexp="${regexp}${types[$idx]}"
	done

	regexp="${regexp})(\([a-zA-Z0-9_\/ \-]+\))?: ([a-zA-Z0-9_:\$\.\/\^ \-]+)( \(\#[1-9][0-9]{1,8}\))?)$"
}

# Print out a standard error message which explains
# how the commit message should be structured
function print_error() {
	commit_message=$1
	regexp=$2

	echo -e "\033[1m\033[31m[Invalid Commit Message]"
	echo -e "------------------------\033[0m\033[0m"
	echo -e "\033[1mValidation regexp:      \033[0m \033[34m""$regexp""\033[0m"
	echo -e "\033[1mMax length (first line):\033[0m \033[34m$max_length\033[0m"
	echo -e "\033[1mMin length (first line):\033[0m \033[34m$min_length\033[0m"
	echo -e "\033[1mActual commit message:  \e[33m" \"$commit_message\""\033[0m"
	echo -e "\033[1mActual length:          \e[33m ${#commit_message}\033[0m"
}

check_jq_exists_and_executable

# get the first line of the commit message
msg=$(head -n1 "$1")

build_regex

if [[ ${#msg} -lt $min_length ]] ||
   [[ ${#msg} -gt $max_length ]] ||
   [[ ! $msg =~ $regexp ]] ||
   [[ ${msg: -1} == " " ]]
	then
	print_error "$msg" "$regexp"
	exit 1
fi

